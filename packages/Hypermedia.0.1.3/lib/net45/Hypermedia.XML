<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hypermedia</name>
    </assembly>
    <members>
        <member name="T:Hypermedia.Affordances.RepresentationAffordance">
            <summary>
                Uses a string as a name for what this instance represents.  Meant to
                be used by a client application to understand how to use a given hypermedia entity.
            </summary>
        </member>
        <member name="T:Hypermedia.EntityConfiguration`1">
            <summary>
            <para>
                A configuration which defines which specific transformation should be used
                for a given entity type.
            </para>
            <para>
                An optional name can be provided to identify this specific configuration for a given
                entity type.  This can then be used to uniquely identify a configuration for
                an entity which has multiple configurations available.  This is most useful
                when a distinct configuration is needed for sub entities versus root entities.
            </para>
            </summary>
            <remarks>
                This class is not thread safe, and should not be mutated while it is being read
                from another thread.  It should only be configured at startup and then not mutated
                while the application is executing.
            </remarks>
        </member>
        <member name="M:Hypermedia.HypermediaConfiguration.RegisterEntity``1(System.Action{Hypermedia.EntityConfiguration{``0}})">
            <summary>
                Registers an entity configuration to transform the provided
                <typeparamref name="T"/> entity type.  This method registers
                this configuration as the default transformation for this entity type.
            </summary>
            <typeparam name="T">
                The type of entity being transformed.
            </typeparam>
            <param name="configurationAction">
                The action callback used to configure how this entity should be transformed.
            </param>
            <returns>
                This configuration object to allow for fluent configuration interfaces.
            </returns>
        </member>
        <member name="M:Hypermedia.HypermediaConfiguration.RegisterEntity``1(System.Action{Hypermedia.EntityConfiguration{``0}},System.String)">
            <summary>
                Registers an entity configuration to transform the provided
                <typeparamref name="T"/> entity type.  This method registers
                this configuration as the default transformation for this entity type.
            </summary>
            <typeparam name="T">
                The type of entity being transformed.
            </typeparam>
            <param name="configurationAction">
                The action callback used to configure how this entity should be transformed.
            </param>
            <returns>
                This configuration object to allow for fluent configuration interfaces.
            </returns>
        </member>
        <member name="M:Hypermedia.HypermediaConfiguration.GetTransforms(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="configurationName"></param>
            <returns></returns>
            <remarks>
                This method internally mutates a concurrent dictionary, possibly from multiple
                threads.  This dictionary is used as a cache of type/configuration name to
                all transforms.  This means that it's possible for multiple requests to create
                the full list of transforms multiple times and then the last request save
                the cached result.  This is considered okay since having multiple collections
                of the same transforms is not an issue.  Since the concurrent dictionary allows
                for multiple threads reading/writing, the implementation is also thread safe.
            </remarks>
        </member>
        <member name="M:Hypermedia.HttpConfigurationExtensions.EnableHypermedia(System.Web.Http.HttpConfiguration,System.Web.Http.Routing.IDirectRouteProvider)">
            <summary>
                Registers Hypermedia handlers with the ASP.NET configuration.  Note this also 
                enables attribute based routing within ASP.NET.  There is no need to configure
                your own attribute based routing.
            </summary>
            <param name="config">
                The ASP.NET configuration to register Hypermedia with.
            </param>
            <param name="directRouteProvider">
                Optional. The <see cref="T:System.Web.Http.Routing.IDirectRouteProvider"/> to be used when registering 
                the WebApi attribute based routing.
            </param>
            <returns>
                The created hypermedia configuration.
            </returns>
        </member>
        <member name="T:Hypermedia.Linker.DrumExpressionValuesProvider">
            <summary>
                Implementation of a route values provider which utilizes Drum
                method meta data to determine what route values to return.
            </summary>
        </member>
        <member name="T:Hypermedia.Linker.DrumRouteEntryProvider">
            <summary>
                Implementation of a RouteEntry provider which pulls the Route Entry information
                from the Drum route metadata.
            </summary>
        </member>
        <member name="T:Hypermedia.Linker.HttpConfigurationExtensions">
            <summary>
                Extension methods which are used to initialize the Hypermedia linker configuration.
            </summary>
            <remarks>
                This will register Drum and calculate all available routes within the application.
            </remarks>
        </member>
        <member name="M:Hypermedia.Linker.HttpConfigurationExtensions.RegisterLinker(System.Web.Http.HttpConfiguration,System.Web.Http.Routing.IDirectRouteProvider)">
            <summary>
                Registers the HypermediaLinker with the ASP.NET configuration.  This also will
                parse all available ASP.NET route and store meta-data regarding those routes
                for Drum.  Note that if you call this you do not need to register ASP.NET
                Attribute routing yourself.
            </summary>
            <param name="config">
                The HTTP configuration to use for registration.
            </param>
            <param name="directRouteProvider">
                Optional. The <see cref="T:System.Web.Http.Routing.IDirectRouteProvider"/> to be used when registering 
                the WebApi attribute based routing.
            </param>
        </member>
        <member name="T:Hypermedia.Linker.HypermediaLinkProvider">
            <summary>
                Default implementation of the <see cref="T:Hypermedia.Linker.ILinkProvider"/> for Hypermedia.NET.
            </summary>
        </member>
        <member name="T:Hypermedia.Linker.HypermediaLinkProviderException">
            <summary>
            Exception that is captured when obtaining the route information when using the 
            <see cref="T:Hypermedia.Linker.HypermediaLinkProvider"/>.
            </summary>
        </member>
        <member name="T:Hypermedia.Linker.ILinkProvider">
            <summary>
                Defines a contract for a service which can provide Uris provided
                an expression to a controller method.
            </summary>
        </member>
        <member name="M:Hypermedia.Linker.ILinkProvider.GetUri``1(System.Linq.Expressions.Expression{System.Action{``0}},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
                Returns a Uri which can be used to reference the controller method passed
                as an expression to execute a specific controller method.  This version of
                the GetUri impelmentation is designed to work where there is no return
                type from the controller method.
            </summary>
            <typeparam name="T">
                The type of controller which contains the method to link to.
            </typeparam>
            <param name="method">
                The expression for the controller method which is where we want to link to.
            </param>
            <param name="scopeParameters">
                Optional parameter which provides any expression arguments which may exist within
                a closure scrope to the provided controller expression to use to obtain argument
                values for routing purposes.
            </param>
            <returns>
                The Uri to access the provided controller method.
            </returns>
        </member>
        <member name="M:Hypermedia.Linker.ILinkProvider.GetUri``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
                Returns a Uri which can be used to reference the controller method passed
                as an expression to execute a specific controller method.
            </summary>
            <typeparam name="T">
                The type of controller which contains the method to link to.
            </typeparam>
            <typeparam name="TResult">
                The return type of the controller method.
            </typeparam>
            <param name="method">
                The expression for the controller method which is where we want to link to.
            </param>
            <param name="scopeParameters">
                Optional parameter which provides any expression arguments which may exist within
                a closure scrope to the provided controller expression to use to obtain argument
                values for routing purposes.
            </param>
            <returns>
                The Uri to access the provided controller method.
            </returns>
        </member>
        <member name="T:Hypermedia.Linker.IRouteEntryProvider">
            <summary>
                Defines a contract for a service which is able to identify
                the ASP.NET Route and parameter values given an expression
                to a controller method.
            </summary>
        </member>
        <member name="M:Hypermedia.Linker.IRouteEntryProvider.Route(System.Type,System.Linq.Expressions.MethodCallExpression,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
                Returns a RouteEntry instance which provides both the name of the ASP.NET to route to
                as well as the values of all Uri arguments to be used to generate the route.
            </summary>
            <param name="methodExpression">
                The controller method to route to.
            </param>
            <param name="scopeParameters">
                Any prameters which may exist within closure scope which could be used by the controller method
                in order to obtain the parameter values for the controller method.
            </param>
            <param name="declaringType">
                The actual type that declares the method being used in the <paramref name="methodExpression"/>. This
                is needed in case of object polymorphism because the actual declaring type is lost when converting
                an <see cref="T:System.Linq.Expressions.Expression"/> into a <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.
            </param>
            <returns></returns>
        </member>
        <member name="T:Hypermedia.Linker.IRouteValuesProvider">
            <summary>
                Defines a service which is used to extract parameter values
                from a method expression to a controller.
            </summary>
        </member>
        <member name="M:Hypermedia.Linker.IRouteValuesProvider.GetRouteValues(Drum.MethodHandler,System.Linq.Expressions.MethodCallExpression,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
                Returns a dictionary of parameter names and values which should be used within the URL which routes
                to the method described in the provided <paramref name="methodCallExpression"/>.
            </summary>
            <param name="handler">
                Cached method information for the route.
            </param>
            <param name="methodCallExpression">
                Expression which describes the controller method to route to.
            </param>
            <param name="scopeParameters">
                Dictionary of any parameters which exist within closure scope for the controller expression
                so that it can obtain the correct controller method arguments.
            </param>
            <returns></returns>
            <remarks>
                This method should break down any complex object parameters into the properties which are on that object
                in order to be used for link generation.
            </remarks>
        </member>
        <member name="M:Hypermedia.Linker.RequestExtensions.GetLinker(System.Net.Http.HttpRequestMessage)">
            <summary>
                Returns the default Linker for Hypermedia.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Hypermedia.Linker.RequestExtensions.GetRouteEntryProvider(System.Net.Http.HttpRequestMessage)">
            <summary>
                Returns a provider which is able to return route entry information for controller routes.
            </summary>
        </member>
        <member name="M:Hypermedia.Linker.RequestExtensions.GetLinker(System.Net.Http.HttpRequestMessage,Hypermedia.Linker.IRouteEntryProvider)">
            <summary>
                Constructs a HypermediaLinkProvider with the provider Route Entry provider.
            </summary>
            <param name="request">
                The request to obtain ASP.NET and Drum configurations from.
            </param>
            <param name="routeEntryProvider">
                The route entry provider to use within the hypermedia link provider.
            </param>
            <returns></returns>
        </member>
        <member name="T:Hypermedia.Linker.RouteEntry">
            <summary>
                Class which composites information about a call to an ASP.NET Route
                This class contains both the ASP.NET Unique name for the route
                as well as the parameter values which were used for an invocation
                of that route.
            </summary>
        </member>
        <member name="T:Hypermedia.Siren.SirenAction">
             <summary>
             A DTO representing an Action in the Siren hypermedia format.
            
             For more information, see: https://github.com/kevinswiber/siren
             </summary>
        </member>
        <member name="T:Hypermedia.Siren.SirenEntity">
             <summary>
             A DTO representing an Entity in the Siren hypermedia format.
            
             For more information, see: https://github.com/kevinswiber/siren
             </summary>
        </member>
        <member name="T:Hypermedia.Siren.SirenFormatter">
             <summary>
             A formatter used to serialize responses into the Siren hypermedia format.
            
             For more information, see: https://github.com/kevinswiber/siren
             </summary>
        </member>
        <member name="M:Hypermedia.Siren.SirenFormatter.#ctor(System.Boolean)">
            <summary>
                Creates a new instance of a SirenFormatter.  Registering this with ASP.NET
                Will allow for requests which request `application/vnd.siren+json` to respond
                with a proper Siren Hypermedia response.
            </summary>
            <param name="manualSerialization">
                Optional parameter to enable an experimental feature where JSON
                responses are manually serialized to JSON instead of using Reflection
                on SirenEntity to determine how to serialize the response.  While
                this offers a performance improvement, it's usage is still experimental,
                and therefore defaults to false, or disabled.
            </param>
        </member>
        <member name="T:Hypermedia.Siren.SirenLink">
             <summary>
             A DTO representing a Link in the Siren hypermedia format.
            
             For more information, see: https://github.com/kevinswiber/siren
             </summary>
        </member>
        <member name="T:Hypermedia.Transforms.ConditionalTransform`1">
            <summary>
                Transform which uses a conditional check to determine if the inner
                transformations should be applied or not.  When the conditional is true
                the transformations will be executed, they will be skipped when the conditional
                is false.
            </summary>
            <typeparam name="T">
                The type of entity being transformed.
            </typeparam>
        </member>
        <member name="T:Hypermedia.Transforms.DefaultConfigurationTransform`1">
            <summary>
                Transform which uses the default configured transformation for the <typeparamref name="T"/>
                entity type.
            </summary>
            <typeparam name="T">
                The type of entity to transform.
            </typeparam>
        </member>
        <member name="T:Hypermedia.Transforms.DefaultConfigurationTransform">
            <summary>
                Transform which uses the default configured transform for a provided entity type.
            </summary>
        </member>
        <member name="M:Hypermedia.Transforms.DefaultConfigurationTransform.#ctor(System.Type)">
            <summary>
                Constructs a new DefaultConfigurationTransform using the provided
                <paramref name="entityType"/> as the type of entity to transform.
            </summary>
            <param name="entityType">
                The type of entity to transform.
            </param>
        </member>
        <member name="T:Hypermedia.Transforms.DelegatedTransform`1">
            <summary>
                Implementation of a transform which simply calls a provided delegate
                to perform the transform action.
            </summary>
            <typeparam name="T">
                The type of entity being transformed.
            </typeparam>
        </member>
        <member name="T:Hypermedia.Transforms.EnumerableSubEntityLinkedTransform`2">
            <summary>
                Transformation which transforms any enumerable type into <see cref="T:Hypermedia.Affordances.SubEntityLinkAffordance" /> affordances.
            </summary>
            <typeparam name="T">
                The enumerable type to be transformed.
            </typeparam>
            <typeparam name="TSubEntity">
                The type of item within the sub entity 
            </typeparam>
        </member>
        <member name="T:Hypermedia.Transforms.EnumerableSubEntityEmbeddedTransform`2">
            <summary>
                Transformation which transforms any enumerable type into <see cref="T:Hypermedia.Affordances.SubEntityEmbeddedAffordance" /> affordances.
            </summary>
            <typeparam name="T">
                The enumerable type to be transformed.
            </typeparam>
            <typeparam name="TSubEntity">
                The type of item within the sub entity to be transformed.
            </typeparam>
        </member>
        <member name="T:Hypermedia.Transforms.NamedEntityConfigurationTransform`1">
            <summary>
                Transformation which applies all transformations to it's target from another named
                <see cref="T:Hypermedia.EntityConfiguration`1">entity configuration</see>.
            </summary>
            <typeparam name="T">
                The tyep of entity to be transformed.
            </typeparam>
        </member>
        <member name="T:Hypermedia.Transforms.ProfileEntityConfigurationTransform`2">
            <summary>
                Transformation which applies all transformations defined within a <see cref="T:Hypermedia.EntityProfile`1"/> profile.
            </summary>
            <typeparam name="T">
                The type of entity to be transformed.
            </typeparam>
            <typeparamref name="TProfile">
                The profile type to use for this configuration.
            </typeparamref>
        </member>
        <member name="T:Hypermedia.Transforms.ReflectiveTransform">
            <summary>
                Transform implementation which creates all affordances just based on reflection
                of the content type being transformed.
            </summary>
            <remarks>
                This type currently does not deal with ciruclar references.  If your dto includes
                circular references this transform will throw an error.
            </remarks>
        </member>
        <member name="T:Hypermedia.Transforms.ResourceTransform">
            <summary>
                Helper base class which simplifies creating custom resource transforms.  This base class
                allows an inherting class to determine if that class will apply a transform synchronously
                or asynchronously.  The class will only expose the asynchronous method publicly, but the inheriting
                class can choose to implement the synchronous version and have the base class deal with converting
                the synchronous execution into an asynchronous task.
            </summary>
            <typeparam name="T">
                The type of entity being transformed.
            </typeparam>
        </member>
        <member name="M:Hypermedia.Transforms.ResourceTransform.ApplyAsync(System.Object,System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage)">
            <summary>
                Publicly exposed method which executes the transform asynchronously.
            </summary>
            <param name="content">
                The item being transformed.
            </param>
            <param name="request">
                The request object which triggered this transform.
            </param>
            <param name="response">
                The default original response being replaced.  Note that in certain cases this
                may be null.
            </param>
            <returns>
                The list of affordances which are a result of this transform.
            </returns>
        </member>
        <member name="M:Hypermedia.Utilities.ExpressionHelpers.GetMethodCallExpression(System.Linq.Expressions.LambdaExpression)">
            <summary>
                Retrieves a MethodCallExpression from a LambdaExpression call to an expression
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:Hypermedia.Utilities.ReflectionHelper">
            <summary>
                Class which provides Reflection based utility functions.  This can be useful
                for parsing expression trees and obtaining values form expression trees.
            </summary>
        </member>
        <member name="M:Hypermedia.Utilities.ReflectionHelper.GetExpressionValue(System.Linq.Expressions.Expression)">
            <summary>
                Version of GetExpressionValue 
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Hypermedia.Utilities.ReflectionHelper.GetExpressionValue(System.Linq.Expressions.Expression,System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>
                Parses an Expression which represents a value.  This would most commonly
                be used to pull method call argument values out of a method call expression.
             </summary>
             <param name="expression">
                The expression which represents the value to compute
             </param>
            <param name="parameters">
                Key/Value pair for named parameters keyed by the name of the parameter.
            </param>
            <returns>
                The computed value of the expression or null.
             </returns>
        </member>
    </members>
</doc>
